/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FreelanceOrderService } from "../freelanceOrder.service";
import { FreelanceOrderCreateInput } from "./FreelanceOrderCreateInput";
import { FreelanceOrder } from "./FreelanceOrder";
import { FreelanceOrderFindManyArgs } from "./FreelanceOrderFindManyArgs";
import { FreelanceOrderWhereUniqueInput } from "./FreelanceOrderWhereUniqueInput";
import { FreelanceOrderUpdateInput } from "./FreelanceOrderUpdateInput";

export class FreelanceOrderControllerBase {
  constructor(protected readonly service: FreelanceOrderService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FreelanceOrder })
  async createFreelanceOrder(
    @common.Body() data: FreelanceOrderCreateInput
  ): Promise<FreelanceOrder> {
    return await this.service.createFreelanceOrder({
      data: {
        ...data,

        client: data.client
          ? {
              connect: data.client,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        price: true,

        client: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FreelanceOrder] })
  @ApiNestedQuery(FreelanceOrderFindManyArgs)
  async freelanceOrders(
    @common.Req() request: Request
  ): Promise<FreelanceOrder[]> {
    const args = plainToClass(FreelanceOrderFindManyArgs, request.query);
    return this.service.freelanceOrders({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        price: true,

        client: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FreelanceOrder })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async freelanceOrder(
    @common.Param() params: FreelanceOrderWhereUniqueInput
  ): Promise<FreelanceOrder | null> {
    const result = await this.service.freelanceOrder({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        price: true,

        client: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FreelanceOrder })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFreelanceOrder(
    @common.Param() params: FreelanceOrderWhereUniqueInput,
    @common.Body() data: FreelanceOrderUpdateInput
  ): Promise<FreelanceOrder | null> {
    try {
      return await this.service.updateFreelanceOrder({
        where: params,
        data: {
          ...data,

          client: data.client
            ? {
                connect: data.client,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          description: true,
          price: true,

          client: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FreelanceOrder })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFreelanceOrder(
    @common.Param() params: FreelanceOrderWhereUniqueInput
  ): Promise<FreelanceOrder | null> {
    try {
      return await this.service.deleteFreelanceOrder({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          description: true,
          price: true,

          client: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
