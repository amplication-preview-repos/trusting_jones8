/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { FreelanceOrder } from "./FreelanceOrder";
import { FreelanceOrderCountArgs } from "./FreelanceOrderCountArgs";
import { FreelanceOrderFindManyArgs } from "./FreelanceOrderFindManyArgs";
import { FreelanceOrderFindUniqueArgs } from "./FreelanceOrderFindUniqueArgs";
import { CreateFreelanceOrderArgs } from "./CreateFreelanceOrderArgs";
import { UpdateFreelanceOrderArgs } from "./UpdateFreelanceOrderArgs";
import { DeleteFreelanceOrderArgs } from "./DeleteFreelanceOrderArgs";
import { Client } from "../../client/base/Client";
import { FreelanceOrderService } from "../freelanceOrder.service";
@graphql.Resolver(() => FreelanceOrder)
export class FreelanceOrderResolverBase {
  constructor(protected readonly service: FreelanceOrderService) {}

  async _freelanceOrdersMeta(
    @graphql.Args() args: FreelanceOrderCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [FreelanceOrder])
  async freelanceOrders(
    @graphql.Args() args: FreelanceOrderFindManyArgs
  ): Promise<FreelanceOrder[]> {
    return this.service.freelanceOrders(args);
  }

  @graphql.Query(() => FreelanceOrder, { nullable: true })
  async freelanceOrder(
    @graphql.Args() args: FreelanceOrderFindUniqueArgs
  ): Promise<FreelanceOrder | null> {
    const result = await this.service.freelanceOrder(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => FreelanceOrder)
  async createFreelanceOrder(
    @graphql.Args() args: CreateFreelanceOrderArgs
  ): Promise<FreelanceOrder> {
    return await this.service.createFreelanceOrder({
      ...args,
      data: {
        ...args.data,

        client: args.data.client
          ? {
              connect: args.data.client,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => FreelanceOrder)
  async updateFreelanceOrder(
    @graphql.Args() args: UpdateFreelanceOrderArgs
  ): Promise<FreelanceOrder | null> {
    try {
      return await this.service.updateFreelanceOrder({
        ...args,
        data: {
          ...args.data,

          client: args.data.client
            ? {
                connect: args.data.client,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FreelanceOrder)
  async deleteFreelanceOrder(
    @graphql.Args() args: DeleteFreelanceOrderArgs
  ): Promise<FreelanceOrder | null> {
    try {
      return await this.service.deleteFreelanceOrder(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Client, {
    nullable: true,
    name: "client",
  })
  async getClient(
    @graphql.Parent() parent: FreelanceOrder
  ): Promise<Client | null> {
    const result = await this.service.getClient(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
