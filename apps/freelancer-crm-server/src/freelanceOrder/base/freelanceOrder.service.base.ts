/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  FreelanceOrder as PrismaFreelanceOrder,
  Client as PrismaClient,
} from "@prisma/client";

export class FreelanceOrderServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FreelanceOrderCountArgs, "select">
  ): Promise<number> {
    return this.prisma.freelanceOrder.count(args);
  }

  async freelanceOrders(
    args: Prisma.FreelanceOrderFindManyArgs
  ): Promise<PrismaFreelanceOrder[]> {
    return this.prisma.freelanceOrder.findMany(args);
  }
  async freelanceOrder(
    args: Prisma.FreelanceOrderFindUniqueArgs
  ): Promise<PrismaFreelanceOrder | null> {
    return this.prisma.freelanceOrder.findUnique(args);
  }
  async createFreelanceOrder(
    args: Prisma.FreelanceOrderCreateArgs
  ): Promise<PrismaFreelanceOrder> {
    return this.prisma.freelanceOrder.create(args);
  }
  async updateFreelanceOrder(
    args: Prisma.FreelanceOrderUpdateArgs
  ): Promise<PrismaFreelanceOrder> {
    return this.prisma.freelanceOrder.update(args);
  }
  async deleteFreelanceOrder(
    args: Prisma.FreelanceOrderDeleteArgs
  ): Promise<PrismaFreelanceOrder> {
    return this.prisma.freelanceOrder.delete(args);
  }

  async getClient(parentId: string): Promise<PrismaClient | null> {
    return this.prisma.freelanceOrder
      .findUnique({
        where: { id: parentId },
      })
      .client();
  }
}
