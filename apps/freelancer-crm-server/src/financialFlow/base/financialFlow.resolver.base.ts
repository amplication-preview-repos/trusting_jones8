/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { FinancialFlow } from "./FinancialFlow";
import { FinancialFlowCountArgs } from "./FinancialFlowCountArgs";
import { FinancialFlowFindManyArgs } from "./FinancialFlowFindManyArgs";
import { FinancialFlowFindUniqueArgs } from "./FinancialFlowFindUniqueArgs";
import { CreateFinancialFlowArgs } from "./CreateFinancialFlowArgs";
import { UpdateFinancialFlowArgs } from "./UpdateFinancialFlowArgs";
import { DeleteFinancialFlowArgs } from "./DeleteFinancialFlowArgs";
import { FinancialFlowService } from "../financialFlow.service";
@graphql.Resolver(() => FinancialFlow)
export class FinancialFlowResolverBase {
  constructor(protected readonly service: FinancialFlowService) {}

  async _financialFlowsMeta(
    @graphql.Args() args: FinancialFlowCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [FinancialFlow])
  async financialFlows(
    @graphql.Args() args: FinancialFlowFindManyArgs
  ): Promise<FinancialFlow[]> {
    return this.service.financialFlows(args);
  }

  @graphql.Query(() => FinancialFlow, { nullable: true })
  async financialFlow(
    @graphql.Args() args: FinancialFlowFindUniqueArgs
  ): Promise<FinancialFlow | null> {
    const result = await this.service.financialFlow(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => FinancialFlow)
  async createFinancialFlow(
    @graphql.Args() args: CreateFinancialFlowArgs
  ): Promise<FinancialFlow> {
    return await this.service.createFinancialFlow({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => FinancialFlow)
  async updateFinancialFlow(
    @graphql.Args() args: UpdateFinancialFlowArgs
  ): Promise<FinancialFlow | null> {
    try {
      return await this.service.updateFinancialFlow({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FinancialFlow)
  async deleteFinancialFlow(
    @graphql.Args() args: DeleteFinancialFlowArgs
  ): Promise<FinancialFlow | null> {
    try {
      return await this.service.deleteFinancialFlow(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
