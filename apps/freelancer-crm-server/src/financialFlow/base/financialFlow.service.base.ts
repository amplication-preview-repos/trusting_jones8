/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, FinancialFlow as PrismaFinancialFlow } from "@prisma/client";

export class FinancialFlowServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FinancialFlowCountArgs, "select">
  ): Promise<number> {
    return this.prisma.financialFlow.count(args);
  }

  async financialFlows(
    args: Prisma.FinancialFlowFindManyArgs
  ): Promise<PrismaFinancialFlow[]> {
    return this.prisma.financialFlow.findMany(args);
  }
  async financialFlow(
    args: Prisma.FinancialFlowFindUniqueArgs
  ): Promise<PrismaFinancialFlow | null> {
    return this.prisma.financialFlow.findUnique(args);
  }
  async createFinancialFlow(
    args: Prisma.FinancialFlowCreateArgs
  ): Promise<PrismaFinancialFlow> {
    return this.prisma.financialFlow.create(args);
  }
  async updateFinancialFlow(
    args: Prisma.FinancialFlowUpdateArgs
  ): Promise<PrismaFinancialFlow> {
    return this.prisma.financialFlow.update(args);
  }
  async deleteFinancialFlow(
    args: Prisma.FinancialFlowDeleteArgs
  ): Promise<PrismaFinancialFlow> {
    return this.prisma.financialFlow.delete(args);
  }
}
